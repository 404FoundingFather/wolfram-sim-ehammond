/**
 * @fileoverview gRPC-Web generated client stub for wolfram_physics_simulator
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: wolfram_physics.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.wolfram_physics_simulator = require('./wolfram_physics_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.InitializeRequest,
 *   !proto.wolfram_physics_simulator.InitializeResponse>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_InitializeSimulation = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/InitializeSimulation',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.InitializeRequest,
  proto.wolfram_physics_simulator.InitializeResponse,
  /**
   * @param {!proto.wolfram_physics_simulator.InitializeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.InitializeResponse.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.InitializeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.InitializeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.InitializeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.initializeSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/InitializeSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_InitializeSimulation,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.InitializeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.InitializeResponse>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.initializeSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/InitializeSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_InitializeSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.StepRequest,
 *   !proto.wolfram_physics_simulator.StepResponse>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_StepSimulation = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StepSimulation',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.StepRequest,
  proto.wolfram_physics_simulator.StepResponse,
  /**
   * @param {!proto.wolfram_physics_simulator.StepRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.StepResponse.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.StepRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.StepResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.StepResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.stepSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StepSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_StepSimulation,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.StepRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.StepResponse>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.stepSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StepSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_StepSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.RunRequest,
 *   !proto.wolfram_physics_simulator.SimulationStateUpdate>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_RunSimulation = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/RunSimulation',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.wolfram_physics_simulator.RunRequest,
  proto.wolfram_physics_simulator.SimulationStateUpdate,
  /**
   * @param {!proto.wolfram_physics_simulator.RunRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.SimulationStateUpdate.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.RunRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.SimulationStateUpdate>}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.runSimulation =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/RunSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_RunSimulation);
};


/**
 * @param {!proto.wolfram_physics_simulator.RunRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.SimulationStateUpdate>}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.runSimulation =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/RunSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_RunSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.StopRequest,
 *   !proto.wolfram_physics_simulator.StopResponse>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_StopSimulation = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StopSimulation',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.StopRequest,
  proto.wolfram_physics_simulator.StopResponse,
  /**
   * @param {!proto.wolfram_physics_simulator.StopRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.StopResponse.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.StopResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.StopResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.stopSimulation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StopSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_StopSimulation,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.StopRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.StopResponse>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.stopSimulation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/StopSimulation',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_StopSimulation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.GetCurrentStateRequest,
 *   !proto.wolfram_physics_simulator.SimulationStateUpdate>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_GetCurrentState = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/GetCurrentState',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.GetCurrentStateRequest,
  proto.wolfram_physics_simulator.SimulationStateUpdate,
  /**
   * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.SimulationStateUpdate.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.SimulationStateUpdate)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.SimulationStateUpdate>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.getCurrentState =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/GetCurrentState',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_GetCurrentState,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.SimulationStateUpdate>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.getCurrentState =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/GetCurrentState',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_GetCurrentState);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.SaveHypergraphRequest,
 *   !proto.wolfram_physics_simulator.SaveHypergraphResponse>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_SaveHypergraph = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/SaveHypergraph',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.SaveHypergraphRequest,
  proto.wolfram_physics_simulator.SaveHypergraphResponse,
  /**
   * @param {!proto.wolfram_physics_simulator.SaveHypergraphRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.SaveHypergraphResponse.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.SaveHypergraphRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.SaveHypergraphResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.SaveHypergraphResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.saveHypergraph =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/SaveHypergraph',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_SaveHypergraph,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.SaveHypergraphRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.SaveHypergraphResponse>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.saveHypergraph =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/SaveHypergraph',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_SaveHypergraph);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.wolfram_physics_simulator.LoadHypergraphRequest,
 *   !proto.wolfram_physics_simulator.LoadHypergraphResponse>}
 */
const methodDescriptor_WolframPhysicsSimulatorService_LoadHypergraph = new grpc.web.MethodDescriptor(
  '/wolfram_physics_simulator.WolframPhysicsSimulatorService/LoadHypergraph',
  grpc.web.MethodType.UNARY,
  proto.wolfram_physics_simulator.LoadHypergraphRequest,
  proto.wolfram_physics_simulator.LoadHypergraphResponse,
  /**
   * @param {!proto.wolfram_physics_simulator.LoadHypergraphRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.wolfram_physics_simulator.LoadHypergraphResponse.deserializeBinary
);


/**
 * @param {!proto.wolfram_physics_simulator.LoadHypergraphRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.wolfram_physics_simulator.LoadHypergraphResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.wolfram_physics_simulator.LoadHypergraphResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServiceClient.prototype.loadHypergraph =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/LoadHypergraph',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_LoadHypergraph,
      callback);
};


/**
 * @param {!proto.wolfram_physics_simulator.LoadHypergraphRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.wolfram_physics_simulator.LoadHypergraphResponse>}
 *     Promise that resolves to the response
 */
proto.wolfram_physics_simulator.WolframPhysicsSimulatorServicePromiseClient.prototype.loadHypergraph =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/wolfram_physics_simulator.WolframPhysicsSimulatorService/LoadHypergraph',
      request,
      metadata || {},
      methodDescriptor_WolframPhysicsSimulatorService_LoadHypergraph);
};


module.exports = proto.wolfram_physics_simulator;

