// source: wolfram_physics.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.exportSymbol('proto.wolfram_physics_simulator.Atom', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.GetCurrentStateRequest', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.HypergraphState', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.InitializeRequest', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.InitializeResponse', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.Relation', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.RunRequest', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.SimulationEvent', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.SimulationStateUpdate', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.StepRequest', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.StepResponse', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.StopRequest', null, global);
goog.exportSymbol('proto.wolfram_physics_simulator.StopResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.Atom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.Atom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.Atom.displayName = 'proto.wolfram_physics_simulator.Atom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.Relation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.Relation.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.Relation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.Relation.displayName = 'proto.wolfram_physics_simulator.Relation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.HypergraphState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.HypergraphState.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.HypergraphState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.HypergraphState.displayName = 'proto.wolfram_physics_simulator.HypergraphState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.SimulationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.SimulationEvent.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.SimulationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.SimulationEvent.displayName = 'proto.wolfram_physics_simulator.SimulationEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.InitializeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.InitializeRequest.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.InitializeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.InitializeRequest.displayName = 'proto.wolfram_physics_simulator.InitializeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.InitializeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.InitializeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.InitializeResponse.displayName = 'proto.wolfram_physics_simulator.InitializeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.StepRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.StepRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.StepRequest.displayName = 'proto.wolfram_physics_simulator.StepRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.StepResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.StepResponse.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.StepResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.StepResponse.displayName = 'proto.wolfram_physics_simulator.StepResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.RunRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.RunRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.RunRequest.displayName = 'proto.wolfram_physics_simulator.RunRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.SimulationStateUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.wolfram_physics_simulator.SimulationStateUpdate.repeatedFields_, null);
};
goog.inherits(proto.wolfram_physics_simulator.SimulationStateUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.SimulationStateUpdate.displayName = 'proto.wolfram_physics_simulator.SimulationStateUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.StopRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.StopRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.StopRequest.displayName = 'proto.wolfram_physics_simulator.StopRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.StopResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.StopResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.StopResponse.displayName = 'proto.wolfram_physics_simulator.StopResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.wolfram_physics_simulator.GetCurrentStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.wolfram_physics_simulator.GetCurrentStateRequest.displayName = 'proto.wolfram_physics_simulator.GetCurrentStateRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.Atom.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.Atom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.Atom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.Atom.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.Atom}
 */
proto.wolfram_physics_simulator.Atom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.Atom;
  return proto.wolfram_physics_simulator.Atom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.Atom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.Atom}
 */
proto.wolfram_physics_simulator.Atom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.Atom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.Atom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.Atom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.Atom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.wolfram_physics_simulator.Atom.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.Atom} returns this
 */
proto.wolfram_physics_simulator.Atom.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.Relation.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.Relation.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.Relation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.Relation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.Relation.toObject = function(includeInstance, msg) {
  var f, obj = {
atomIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.Relation}
 */
proto.wolfram_physics_simulator.Relation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.Relation;
  return proto.wolfram_physics_simulator.Relation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.Relation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.Relation}
 */
proto.wolfram_physics_simulator.Relation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAtomIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.Relation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.Relation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.Relation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.Relation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAtomIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string atom_ids = 1;
 * @return {!Array<string>}
 */
proto.wolfram_physics_simulator.Relation.prototype.getAtomIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wolfram_physics_simulator.Relation} returns this
 */
proto.wolfram_physics_simulator.Relation.prototype.setAtomIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.Relation} returns this
 */
proto.wolfram_physics_simulator.Relation.prototype.addAtomIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.Relation} returns this
 */
proto.wolfram_physics_simulator.Relation.prototype.clearAtomIdsList = function() {
  return this.setAtomIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.HypergraphState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.HypergraphState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.HypergraphState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.HypergraphState.toObject = function(includeInstance, msg) {
  var f, obj = {
atomsList: jspb.Message.toObjectList(msg.getAtomsList(),
    proto.wolfram_physics_simulator.Atom.toObject, includeInstance),
relationsList: jspb.Message.toObjectList(msg.getRelationsList(),
    proto.wolfram_physics_simulator.Relation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.HypergraphState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.HypergraphState;
  return proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.HypergraphState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wolfram_physics_simulator.Atom;
      reader.readMessage(value,proto.wolfram_physics_simulator.Atom.deserializeBinaryFromReader);
      msg.addAtoms(value);
      break;
    case 2:
      var value = new proto.wolfram_physics_simulator.Relation;
      reader.readMessage(value,proto.wolfram_physics_simulator.Relation.deserializeBinaryFromReader);
      msg.addRelations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.HypergraphState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAtomsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.wolfram_physics_simulator.Atom.serializeBinaryToWriter
    );
  }
  f = message.getRelationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wolfram_physics_simulator.Relation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Atom atoms = 1;
 * @return {!Array<!proto.wolfram_physics_simulator.Atom>}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.getAtomsList = function() {
  return /** @type{!Array<!proto.wolfram_physics_simulator.Atom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wolfram_physics_simulator.Atom, 1));
};


/**
 * @param {!Array<!proto.wolfram_physics_simulator.Atom>} value
 * @return {!proto.wolfram_physics_simulator.HypergraphState} returns this
*/
proto.wolfram_physics_simulator.HypergraphState.prototype.setAtomsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.wolfram_physics_simulator.Atom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.Atom}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.addAtoms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.wolfram_physics_simulator.Atom, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.HypergraphState} returns this
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.clearAtomsList = function() {
  return this.setAtomsList([]);
};


/**
 * repeated Relation relations = 2;
 * @return {!Array<!proto.wolfram_physics_simulator.Relation>}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.getRelationsList = function() {
  return /** @type{!Array<!proto.wolfram_physics_simulator.Relation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wolfram_physics_simulator.Relation, 2));
};


/**
 * @param {!Array<!proto.wolfram_physics_simulator.Relation>} value
 * @return {!proto.wolfram_physics_simulator.HypergraphState} returns this
*/
proto.wolfram_physics_simulator.HypergraphState.prototype.setRelationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wolfram_physics_simulator.Relation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.Relation}
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.addRelations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wolfram_physics_simulator.Relation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.HypergraphState} returns this
 */
proto.wolfram_physics_simulator.HypergraphState.prototype.clearRelationsList = function() {
  return this.setRelationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.SimulationEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.SimulationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.SimulationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.SimulationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
ruleIdApplied: jspb.Message.getFieldWithDefault(msg, 2, ""),
atomsInvolvedInputList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
atomsInvolvedOutputList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.SimulationEvent}
 */
proto.wolfram_physics_simulator.SimulationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.SimulationEvent;
  return proto.wolfram_physics_simulator.SimulationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.SimulationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.SimulationEvent}
 */
proto.wolfram_physics_simulator.SimulationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRuleIdApplied(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAtomsInvolvedInput(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addAtomsInvolvedOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.SimulationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.SimulationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.SimulationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRuleIdApplied();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAtomsInvolvedInputList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAtomsInvolvedOutputList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rule_id_applied = 2;
 * @return {string}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.getRuleIdApplied = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.setRuleIdApplied = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string atoms_involved_input = 3;
 * @return {!Array<string>}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.getAtomsInvolvedInputList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.setAtomsInvolvedInputList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.addAtomsInvolvedInput = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.clearAtomsInvolvedInputList = function() {
  return this.setAtomsInvolvedInputList([]);
};


/**
 * repeated string atoms_involved_output = 4;
 * @return {!Array<string>}
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.getAtomsInvolvedOutputList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.setAtomsInvolvedOutputList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.addAtomsInvolvedOutput = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.SimulationEvent} returns this
 */
proto.wolfram_physics_simulator.SimulationEvent.prototype.clearAtomsInvolvedOutputList = function() {
  return this.setAtomsInvolvedOutputList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.InitializeRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.InitializeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.InitializeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.InitializeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
initialHypergraph: (f = msg.getInitialHypergraph()) && proto.wolfram_physics_simulator.HypergraphState.toObject(includeInstance, f),
predefinedInitialStateId: jspb.Message.getFieldWithDefault(msg, 2, ""),
ruleIdsToUseList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.InitializeRequest}
 */
proto.wolfram_physics_simulator.InitializeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.InitializeRequest;
  return proto.wolfram_physics_simulator.InitializeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.InitializeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.InitializeRequest}
 */
proto.wolfram_physics_simulator.InitializeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wolfram_physics_simulator.HypergraphState;
      reader.readMessage(value,proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader);
      msg.setInitialHypergraph(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPredefinedInitialStateId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addRuleIdsToUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.InitializeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.InitializeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.InitializeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialHypergraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter
    );
  }
  f = message.getPredefinedInitialStateId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRuleIdsToUseList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional HypergraphState initial_hypergraph = 1;
 * @return {?proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.getInitialHypergraph = function() {
  return /** @type{?proto.wolfram_physics_simulator.HypergraphState} */ (
    jspb.Message.getWrapperField(this, proto.wolfram_physics_simulator.HypergraphState, 1));
};


/**
 * @param {?proto.wolfram_physics_simulator.HypergraphState|undefined} value
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
*/
proto.wolfram_physics_simulator.InitializeRequest.prototype.setInitialHypergraph = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.clearInitialHypergraph = function() {
  return this.setInitialHypergraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.hasInitialHypergraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string predefined_initial_state_id = 2;
 * @return {string}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.getPredefinedInitialStateId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.setPredefinedInitialStateId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string rule_ids_to_use = 3;
 * @return {!Array<string>}
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.getRuleIdsToUseList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.setRuleIdsToUseList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.addRuleIdsToUse = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.InitializeRequest} returns this
 */
proto.wolfram_physics_simulator.InitializeRequest.prototype.clearRuleIdsToUseList = function() {
  return this.setRuleIdsToUseList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.InitializeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.InitializeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.InitializeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
message: jspb.Message.getFieldWithDefault(msg, 2, ""),
initialHypergraphState: (f = msg.getInitialHypergraphState()) && proto.wolfram_physics_simulator.HypergraphState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.InitializeResponse}
 */
proto.wolfram_physics_simulator.InitializeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.InitializeResponse;
  return proto.wolfram_physics_simulator.InitializeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.InitializeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.InitializeResponse}
 */
proto.wolfram_physics_simulator.InitializeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new proto.wolfram_physics_simulator.HypergraphState;
      reader.readMessage(value,proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader);
      msg.setInitialHypergraphState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.InitializeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.InitializeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.InitializeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInitialHypergraphState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wolfram_physics_simulator.InitializeResponse} returns this
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.InitializeResponse} returns this
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional HypergraphState initial_hypergraph_state = 3;
 * @return {?proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.getInitialHypergraphState = function() {
  return /** @type{?proto.wolfram_physics_simulator.HypergraphState} */ (
    jspb.Message.getWrapperField(this, proto.wolfram_physics_simulator.HypergraphState, 3));
};


/**
 * @param {?proto.wolfram_physics_simulator.HypergraphState|undefined} value
 * @return {!proto.wolfram_physics_simulator.InitializeResponse} returns this
*/
proto.wolfram_physics_simulator.InitializeResponse.prototype.setInitialHypergraphState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wolfram_physics_simulator.InitializeResponse} returns this
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.clearInitialHypergraphState = function() {
  return this.setInitialHypergraphState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wolfram_physics_simulator.InitializeResponse.prototype.hasInitialHypergraphState = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.StepRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.StepRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.StepRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StepRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
numSteps: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.StepRequest}
 */
proto.wolfram_physics_simulator.StepRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.StepRequest;
  return proto.wolfram_physics_simulator.StepRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.StepRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.StepRequest}
 */
proto.wolfram_physics_simulator.StepRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumSteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.StepRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.StepRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.StepRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StepRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumSteps();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 num_steps = 1;
 * @return {number}
 */
proto.wolfram_physics_simulator.StepRequest.prototype.getNumSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wolfram_physics_simulator.StepRequest} returns this
 */
proto.wolfram_physics_simulator.StepRequest.prototype.setNumSteps = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.StepResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.StepResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.StepResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StepResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
newHypergraphState: (f = msg.getNewHypergraphState()) && proto.wolfram_physics_simulator.HypergraphState.toObject(includeInstance, f),
eventsOccurredList: jspb.Message.toObjectList(msg.getEventsOccurredList(),
    proto.wolfram_physics_simulator.SimulationEvent.toObject, includeInstance),
currentStepNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.StepResponse}
 */
proto.wolfram_physics_simulator.StepResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.StepResponse;
  return proto.wolfram_physics_simulator.StepResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.StepResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.StepResponse}
 */
proto.wolfram_physics_simulator.StepResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wolfram_physics_simulator.HypergraphState;
      reader.readMessage(value,proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader);
      msg.setNewHypergraphState(value);
      break;
    case 2:
      var value = new proto.wolfram_physics_simulator.SimulationEvent;
      reader.readMessage(value,proto.wolfram_physics_simulator.SimulationEvent.deserializeBinaryFromReader);
      msg.addEventsOccurred(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentStepNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.StepResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.StepResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StepResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewHypergraphState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter
    );
  }
  f = message.getEventsOccurredList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wolfram_physics_simulator.SimulationEvent.serializeBinaryToWriter
    );
  }
  f = message.getCurrentStepNumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional HypergraphState new_hypergraph_state = 1;
 * @return {?proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.getNewHypergraphState = function() {
  return /** @type{?proto.wolfram_physics_simulator.HypergraphState} */ (
    jspb.Message.getWrapperField(this, proto.wolfram_physics_simulator.HypergraphState, 1));
};


/**
 * @param {?proto.wolfram_physics_simulator.HypergraphState|undefined} value
 * @return {!proto.wolfram_physics_simulator.StepResponse} returns this
*/
proto.wolfram_physics_simulator.StepResponse.prototype.setNewHypergraphState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wolfram_physics_simulator.StepResponse} returns this
 */
proto.wolfram_physics_simulator.StepResponse.prototype.clearNewHypergraphState = function() {
  return this.setNewHypergraphState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.hasNewHypergraphState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SimulationEvent events_occurred = 2;
 * @return {!Array<!proto.wolfram_physics_simulator.SimulationEvent>}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.getEventsOccurredList = function() {
  return /** @type{!Array<!proto.wolfram_physics_simulator.SimulationEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wolfram_physics_simulator.SimulationEvent, 2));
};


/**
 * @param {!Array<!proto.wolfram_physics_simulator.SimulationEvent>} value
 * @return {!proto.wolfram_physics_simulator.StepResponse} returns this
*/
proto.wolfram_physics_simulator.StepResponse.prototype.setEventsOccurredList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wolfram_physics_simulator.SimulationEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.SimulationEvent}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.addEventsOccurred = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wolfram_physics_simulator.SimulationEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.StepResponse} returns this
 */
proto.wolfram_physics_simulator.StepResponse.prototype.clearEventsOccurredList = function() {
  return this.setEventsOccurredList([]);
};


/**
 * optional int64 current_step_number = 3;
 * @return {number}
 */
proto.wolfram_physics_simulator.StepResponse.prototype.getCurrentStepNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wolfram_physics_simulator.StepResponse} returns this
 */
proto.wolfram_physics_simulator.StepResponse.prototype.setCurrentStepNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.RunRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.RunRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.RunRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.RunRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
updateIntervalMs: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.RunRequest}
 */
proto.wolfram_physics_simulator.RunRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.RunRequest;
  return proto.wolfram_physics_simulator.RunRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.RunRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.RunRequest}
 */
proto.wolfram_physics_simulator.RunRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUpdateIntervalMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.RunRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.RunRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.RunRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.RunRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpdateIntervalMs();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 update_interval_ms = 1;
 * @return {number}
 */
proto.wolfram_physics_simulator.RunRequest.prototype.getUpdateIntervalMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.wolfram_physics_simulator.RunRequest} returns this
 */
proto.wolfram_physics_simulator.RunRequest.prototype.setUpdateIntervalMs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.SimulationStateUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.SimulationStateUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
currentGraph: (f = msg.getCurrentGraph()) && proto.wolfram_physics_simulator.HypergraphState.toObject(includeInstance, f),
recentEventsList: jspb.Message.toObjectList(msg.getRecentEventsList(),
    proto.wolfram_physics_simulator.SimulationEvent.toObject, includeInstance),
stepNumber: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.SimulationStateUpdate;
  return proto.wolfram_physics_simulator.SimulationStateUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.SimulationStateUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.wolfram_physics_simulator.HypergraphState;
      reader.readMessage(value,proto.wolfram_physics_simulator.HypergraphState.deserializeBinaryFromReader);
      msg.setCurrentGraph(value);
      break;
    case 2:
      var value = new proto.wolfram_physics_simulator.SimulationEvent;
      reader.readMessage(value,proto.wolfram_physics_simulator.SimulationEvent.deserializeBinaryFromReader);
      msg.addRecentEvents(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStepNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.SimulationStateUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.SimulationStateUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.wolfram_physics_simulator.HypergraphState.serializeBinaryToWriter
    );
  }
  f = message.getRecentEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.wolfram_physics_simulator.SimulationEvent.serializeBinaryToWriter
    );
  }
  f = message.getStepNumber();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional HypergraphState current_graph = 1;
 * @return {?proto.wolfram_physics_simulator.HypergraphState}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.getCurrentGraph = function() {
  return /** @type{?proto.wolfram_physics_simulator.HypergraphState} */ (
    jspb.Message.getWrapperField(this, proto.wolfram_physics_simulator.HypergraphState, 1));
};


/**
 * @param {?proto.wolfram_physics_simulator.HypergraphState|undefined} value
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate} returns this
*/
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.setCurrentGraph = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate} returns this
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.clearCurrentGraph = function() {
  return this.setCurrentGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.hasCurrentGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SimulationEvent recent_events = 2;
 * @return {!Array<!proto.wolfram_physics_simulator.SimulationEvent>}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.getRecentEventsList = function() {
  return /** @type{!Array<!proto.wolfram_physics_simulator.SimulationEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.wolfram_physics_simulator.SimulationEvent, 2));
};


/**
 * @param {!Array<!proto.wolfram_physics_simulator.SimulationEvent>} value
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate} returns this
*/
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.setRecentEventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.wolfram_physics_simulator.SimulationEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.wolfram_physics_simulator.SimulationEvent}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.addRecentEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.wolfram_physics_simulator.SimulationEvent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate} returns this
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.clearRecentEventsList = function() {
  return this.setRecentEventsList([]);
};


/**
 * optional int64 step_number = 3;
 * @return {number}
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.getStepNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.wolfram_physics_simulator.SimulationStateUpdate} returns this
 */
proto.wolfram_physics_simulator.SimulationStateUpdate.prototype.setStepNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.StopRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.StopRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.StopRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StopRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.StopRequest}
 */
proto.wolfram_physics_simulator.StopRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.StopRequest;
  return proto.wolfram_physics_simulator.StopRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.StopRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.StopRequest}
 */
proto.wolfram_physics_simulator.StopRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.StopRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.StopRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.StopRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StopRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.StopResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.StopResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.StopResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StopResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.StopResponse}
 */
proto.wolfram_physics_simulator.StopResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.StopResponse;
  return proto.wolfram_physics_simulator.StopResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.StopResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.StopResponse}
 */
proto.wolfram_physics_simulator.StopResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.StopResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.StopResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.StopResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.StopResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.wolfram_physics_simulator.StopResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.wolfram_physics_simulator.StopResponse} returns this
 */
proto.wolfram_physics_simulator.StopResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.wolfram_physics_simulator.StopResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.wolfram_physics_simulator.StopResponse} returns this
 */
proto.wolfram_physics_simulator.StopResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.wolfram_physics_simulator.GetCurrentStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.wolfram_physics_simulator.GetCurrentStateRequest}
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.wolfram_physics_simulator.GetCurrentStateRequest;
  return proto.wolfram_physics_simulator.GetCurrentStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.wolfram_physics_simulator.GetCurrentStateRequest}
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.wolfram_physics_simulator.GetCurrentStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.wolfram_physics_simulator.GetCurrentStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.wolfram_physics_simulator.GetCurrentStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


